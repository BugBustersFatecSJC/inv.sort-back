generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model auditlog {
  log_id            Int             @id @default(autoincrement())
  user_id           Int
  local_id          Int?
  sector_id         Int?
  supplier_id       Int?
  supplier_name     String?
  batch_id          Int?
  category_id       Int?
  category_name     String?
  product_id        Int?
  product_name      String?
  action            auditlog_action
  table_name        String
  primary_key_value String
  old_value         String?
  new_value         String?
  product_stock     Int?
  product_stock_min Int?
  quantity_max      Int?
  action_date       DateTime        @default(now())
  batch             batch?          @relation(fields: [batch_id], references: [batch_id], map: "AuditLog_batch_id_fkey")
  category          category?       @relation(fields: [category_id], references: [category_id], map: "AuditLog_category_id_fkey")
  local             local?          @relation(fields: [local_id], references: [local_id], map: "AuditLog_local_id_fkey")
  product           product?        @relation(fields: [product_id], references: [product_id], map: "AuditLog_product_id_fkey")
  sector            sector?         @relation(fields: [sector_id], references: [sector_id], map: "AuditLog_sector_id_fkey")
  supplier          supplier?       @relation(fields: [supplier_id], references: [supplier_id], map: "AuditLog_supplier_id_fkey")
  user              user            @relation(fields: [user_id], references: [user_id], map: "AuditLog_user_id_fkey")

  @@index([batch_id], map: "AuditLog_batch_id_fkey")
  @@index([category_id], map: "AuditLog_category_id_fkey")
  @@index([local_id], map: "AuditLog_local_id_fkey")
  @@index([product_id], map: "AuditLog_product_id_fkey")
  @@index([sector_id], map: "AuditLog_sector_id_fkey")
  @@index([supplier_id], map: "AuditLog_supplier_id_fkey")
  @@index([user_id], map: "AuditLog_user_id_fkey")
}

model batch {
  batch_id          Int             @id @default(autoincrement())
  product_id        Int
  quantity          Int
  expiration_date   DateTime?
  manufacture_date  DateTime?
  batch_value_total Float?
  created_at        DateTime        @default(now())
  auditlog          auditlog[]
  product           product         @relation(fields: [product_id], references: [product_id], map: "Batch_product_id_fkey")
  stockmovement     stockmovement[]

  @@index([product_id], map: "Batch_product_id_fkey")
}

model category {
  category_id    Int             @id @default(autoincrement())
  category_name  String          @unique(map: "Category_category_name_key")
  category_image String?
  created_at     DateTime        @default(now())
  auditlog       auditlog[]
  product        product[]
  stockmovement  stockmovement[]
}

model local {
  local_id      Int        @id @default(autoincrement())
  local_name    String?
  local_address String?
  created_at    DateTime   @default(now())
  auditlog      auditlog[]
  sector        sector[]
}

model product {
  product_id        Int             @id @default(autoincrement())
  product_name      String
  description       String?
  product_img       String?
  product_stock     Int
  product_stock_min Int
  category_id       Int
  prod_brand        String?
  prod_model        String?
  supplier_id       Int
  unit_id           Int
  is_perishable     Boolean         @default(false)
  created_at        DateTime        @default(now())
  prod_cost_value   Float?
  prod_sell_value   Float?
  quantity_max      Int
  auditlog          auditlog[]
  batch             batch[]
  category          category        @relation(fields: [category_id], references: [category_id], map: "Product_category_id_fkey")
  supplier          supplier        @relation(fields: [supplier_id], references: [supplier_id], map: "Product_supplier_id_fkey")
  productunit       productunit     @relation(fields: [unit_id], references: [unit_id], map: "Product_unit_id_fkey")
  stockmovement     stockmovement[]

  @@index([product_name], map: "idx_product_name")
  @@index([category_id], map: "idx_products_category")
  @@index([supplier_id], map: "idx_products_supplier")
  @@index([unit_id], map: "idx_products_unit")
}

model productunit {
  unit_id   Int                   @id @default(autoincrement())
  unit_type productunit_unit_type
  product   product[]
}

model sector {
  sector_id   Int        @id @default(autoincrement())
  local_id    Int
  sector_name String
  created_at  DateTime   @default(now())
  auditlog    auditlog[]
  local       local      @relation(fields: [local_id], references: [local_id], map: "Sector_local_id_fkey")

  @@index([local_id], map: "Sector_local_id_fkey")
}

model stockmovement {
  movement_id       Int                         @id @default(autoincrement())
  batch_id          Int
  quantity          Int
  quantity_max      Int?
  product_stock     Int?
  product_stock_min Int?
  movement_type     stockmovement_movement_type
  movement_date     DateTime                    @default(now())
  user_id           Int
  category_id       Int?
  product_id        Int?
  batch             batch                       @relation(fields: [batch_id], references: [batch_id], map: "StockMovement_batch_id_fkey")
  category          category?                   @relation(fields: [category_id], references: [category_id], map: "StockMovement_category_id_fkey")
  product           product?                    @relation(fields: [product_id], references: [product_id], map: "StockMovement_product_id_fkey")
  user              user                        @relation(fields: [user_id], references: [user_id], map: "StockMovement_user_id_fkey")

  @@index([category_id], map: "StockMovement_category_id_fkey")
  @@index([product_id], map: "StockMovement_product_id_fkey")
  @@index([batch_id], map: "idx_stock_movements_batch")
  @@index([movement_type], map: "idx_stock_movements_type")
  @@index([user_id], map: "idx_stock_movements_user")
}

model supplier {
  supplier_id   Int        @id @default(autoincrement())
  supplier_name String     @unique(map: "Supplier_supplier_name_key")
  contact_info  String?
  supplier_img  String?
  address       String?
  created_at    DateTime   @default(now())
  auditlog      auditlog[]
  product       product[]
}

model user {
  user_id       Int             @id @default(autoincrement())
  username      String          @unique(map: "User_username_key")
  email         String          @unique(map: "User_email_key")
  password      String
  role          user_role
  created_at    DateTime        @default(now())
  status        user_status     @default(ativo)
  user_img      String?
  auditlog      auditlog[]
  stockmovement stockmovement[]
}

enum productunit_unit_type {
  un
  kg
  lt
}

enum user_role {
  admin
  gerente
  funcionario
}

enum stockmovement_movement_type {
  compra
  venda
}

enum user_status {
  ativo
  inativo
}

enum auditlog_action {
  INSERT
  UPDATE
  DELETE
}
